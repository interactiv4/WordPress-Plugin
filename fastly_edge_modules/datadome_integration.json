{
  "description": "Set of VCLs required to integrate Datadome services. Please note for full functionality Fastly support needs to enable proper handling of POST requests. Do not enable unless this has been done.",
  "id": "datadome_integration",
  "name": "DataDome Bot Detection integration",
  "properties": [
    {
      "label": "Datadome API Key",
      "name": "datadome_api_key",
      "type": "string",
      "description": "API Key",
      "required": true
    }
  ],
  "test": {
    "origins": [
      "https://httpbin.org"
    ],
    "reqUrl": "/sourcePath"
  },
  "vcl": [
    {
      "template": "sub set_origin_header {\n  if (req.backend.is_origin) {\n    unset bereq.http.destination;\n    if (req.backend == datadome) {\n        set bereq.http.x-datadome-apikey = \"{{datadome_api_key}}\";\n        set bereq.http.x-datadome-modulename = \"Fastly\";\n        set bereq.http.x-datadome-moduleversion = \"1.10\";\n        set bereq.http.x-datadome-timestamp = time.start.usec;\n        set bereq.http.x-datadome-serverhostname = server.identity;\n        set bereq.http.x-datadome-server-region = server.region;\n        set bereq.http.x-real-ip = req.http.fastly-client-ip;\n        set bereq.http.x-authorizationlen = std.strlen(req.http.authorization);\n        unset bereq.http.authorization;\n        set bereq.http.x-datadome-clientid = req.http.cookie:datadome;\n        set bereq.http.x-cookieslen = std.strlen(req.http.cookie);\n        unset bereq.http.cookie;\n        set bereq.http.x-original-method = urldecode(req.http.x-datadome-headers-pairs:x-original-method);\n        set bereq.http.x-content-length = urldecode(req.http.x-datadome-headers-pairs:x-content-length);\n        unset bereq.http.x-datadome-headers-pairs;\n    } else {\n        # prevent leak of the key\n        unset bereq.http.x-datadome-apikey;\n        unset bereq.http.x-datadome-modulename;\n        unset bereq.http.x-datadome-moduleversion;\n        unset bereq.http.x-datadome-timestamp;\n        unset bereq.http.x-datadome-serverhostname;\n        unset bereq.http.x-datadome-server-region;\n        unset bereq.http.x-datadome-headers;\n        unset bereq.http.x-datadome-headers-pairs;\n        unset bereq.http.x-authorizationlen;\n        unset bereq.http.x-original-method;\n        unset bereq.http.x-content-length;\n        unset bereq.http.x-authorizationlen;\n        unset bereq.http.x-cookieslen;\n        unset bereq.http.x-datadome-clientid;\n        unset bereq.http.x-datadome-headers-pairs;\n    }\n  }\n}\n\nbackend datadome {\n    .host = \"api-fastly.datadome.co\";\n    .port = \"8443\";\n    .connect_timeout = 150ms;\n    .first_byte_timeout = 50ms;\n    .between_bytes_timeout = 50ms;\n    .max_connections = 200;\n    .ssl = true;\n    .dynamic = true;\n    .probe = {\n        .request = \"HEAD /.well-known/healthcheck-datadome HTTP/1.1\" \"Host: api-fastly.datadome.co\" \"Connection: close\" \"User-Agent: Varnish/fastly (healthcheck)\";\n        .expected_response = 200;\n        .initial = 5;\n        .interval = 2s;\n        .threshold = 1;\n        .timeout = 2s;\n        .window = 5;\n      }\n}",
      "type": "init"
    },
    {
      "template": "  if (req.backend == datadome) {\n    declare local var.status STRING;\n    set var.status = beresp.status;\n    # check that it is real ApiServer response\n    if (var.status != beresp.http.x-datadomeresponse) {\n      restart;\n    }\n    unset beresp.http.x-datadomeresponse;\n    # copy datadome headers\n    set req.http.x-datadome-headers-pairs:x-datadome-headers = urlencode(beresp.http.x-datadome-headers);\n\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+x-datadome-server( |$)+\") {\n      set req.http.x-datadome-headers-pairs:x-datadome-server = urlencode(beresp.http.x-datadome-server);\n    }\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+x-datadome( |$)+\") {\n      set req.http.x-datadome-headers-pairs:x-datadome = urlencode(beresp.http.x-datadome);\n    }\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+content-type( |$)+\") {\n      set req.http.x-datadome-headers-pairs:content-type = urlencode(beresp.http.content-type);\n    }\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+charset( |$)+\") {\n      set req.http.x-datadome-headers-pairs:charset = urlencode(beresp.http.charset);\n    }\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+cache-control( |$)+\") {\n      set req.http.x-datadome-headers-pairs:cache-control = urlencode(beresp.http.cache-control);\n    }\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+pragma( |$)+\") {\n      set req.http.x-datadome-headers-pairs:pragma = urlencode(beresp.http.pragma);\n    }\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+access-control-allow-credentials( |$)+\") {\n      set req.http.x-datadome-headers-pairs:access-control-allow-credentials = urlencode(beresp.http.access-control-allow-credentials);\n    }\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+access-control-expose-headers( |$)+\") {\n      set req.http.x-datadome-headers-pairs:access-control-expose-headers = urlencode(beresp.http.access-control-expose-headers);\n    }\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+access-control-allow-origin( |$)+\") {\n      set req.http.x-datadome-headers-pairs:access-control-allow-origin = urlencode(beresp.http.access-control-allow-origin);\n    }\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+x-datadome-cid( |$)+\") {\n      set req.http.x-datadome-headers-pairs:x-datadome-cid = urlencode(beresp.http.x-datadome-cid);\n    }\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+x-dd-b( |$)+\") {\n      set req.http.x-datadome-headers-pairs:x-dd-b = urlencode(beresp.http.x-dd-b);\n    }\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+x-dd-type( |$)+\") {\n      set req.http.x-datadome-headers-pairs:x-dd-type = urlencode(beresp.http.x-dd-type);\n    }\n    if (beresp.http.x-datadome-request-headers ~ \"(?i)(^| )+x-dd-type( |$)+\") {\n      set req.http.x-dd-type = beresp.http.x-dd-type;\n    }\n    if (beresp.http.x-datadome-request-headers ~ \"(?i)(^| )+x-datadome-botname( |$)+\") {\n      set req.http.x-datadome-botname = beresp.http.x-datadome-botname;\n    }\n    if (beresp.http.x-datadome-request-headers ~ \"(?i)(^| )+x-datadome-botfamily( |$)+\") {\n      set req.http.x-datadome-botfamily = beresp.http.x-datadome-botfamily;\n    }\n    if (beresp.http.x-datadome-request-headers ~ \"(?i)(^| )+x-datadome-isbot( |$)+\") {\n      set req.http.x-datadome-isbot = beresp.http.x-datadome-isbot;\n    }\n    if (beresp.http.x-datadome-request-headers ~ \"(?i)(^| )+x-datadome-captchapassed( |$)+\") {\n      set req.http.x-datadome-captchapassed = beresp.http.x-datadome-captchapassed;\n    }\n    # don't forget about ApiServer's cookies\n    if (beresp.http.x-datadome-headers ~ \"(?i)(^| )+set-cookie( |$)+\") {\n      set req.http.x-datadome-headers-pairs:set-cookie = urlencode(beresp.http.set-cookie);\n    }\n\n    # Continue only if ApiServer returns expected blocked status\n    if (beresp.status != 403 && beresp.status != 401 && beresp.status != 301 && beresp.status != 302) {\n      unset beresp.http.x-datadome-headers;\n      unset beresp.http.x-datadome-request-headers;\n      restart;\n    }\n\n    # ok, it is banned request, cleanup it a bit\n    if (beresp.http.x-datadome-request-headers ~ \"(?i)(^| )+x-dd-type( |$)+\") {\n      if (beresp.http.x-datadome-headers !~ \"(?i)(^| )+x-dd-type( |$)+\") {\n        unset beresp.http.x-dd-type;\n      }\n    }\n    if (beresp.http.x-datadome-request-headers ~ \"(?i)(^| )+x-datadome-botname( |$)+\") {\n      if (beresp.http.x-datadome-headers !~ \"(?i)(^| )+x-datadome-botname( |$)+\") {\n        unset beresp.http.x-datadome-botname;\n      }\n    }\n    if (beresp.http.x-datadome-request-headers ~ \"(?i)(^| )+x-datadome-botfamily( |$)+\") {\n      if (beresp.http.x-datadome-headers !~ \"(?i)(^| )+x-datadome-botfamily( |$)+\") {\n        unset beresp.http.x-datadome-botfamily;\n      }\n    }\n    if (beresp.http.x-datadome-request-headers ~ \"(?i)(^| )+x-datadome-isbot( |$)+\") {\n      if (beresp.http.x-datadome-headers !~ \"(?i)(^| )+x-datadome-isbot( |$)+\") {\n        unset beresp.http.x-datadome-isbot;\n      }\n    }\n    if (beresp.http.x-datadome-request-headers ~ \"(?i)(^| )+x-datadome-captchapassed( |$)+\") {\n      if (beresp.http.x-datadome-headers !~ \"(?i)(^| )+x-datadome-captchapassed( |$)+\") {\n        unset beresp.http.x-datadome-captchapassed;\n      }\n    }\n    unset beresp.http.x-datadome-headers;\n    unset beresp.http.x-datadome-request-headers;\n  }",
      "type": "fetch"
    },
    {
      "template": "  # copy datadome headers if it isn't datadome request\n  if (req.backend != datadome) {\n    declare local var.x-datadome-headers STRING;\n    set var.x-datadome-headers = urldecode(req.http.x-datadome-headers-pairs:x-datadome-headers);\n    if (var.x-datadome-headers ~ \"(?i)(^| )+x-datadome-server( |$)+\") {\n      set resp.http.x-datadome-server = urldecode(req.http.x-datadome-headers-pairs:x-datadome-server);\n    }\n    if (var.x-datadome-headers ~ \"(?i)(^| )+x-datadome( |$)+\") {\n      set resp.http.x-datadome = urldecode(req.http.x-datadome-headers-pairs:x-datadome);\n    }\n    if (var.x-datadome-headers ~ \"(?i)(^| )+content-type( |$)+\") {\n      set resp.http.content-type = urldecode(req.http.x-datadome-headers-pairs:content-type);\n    }\n    if (var.x-datadome-headers ~ \"(?i)(^| )+charset( |$)+\") {\n      set resp.http.charset = urldecode(req.http.x-datadome-headers-pairs:charset);\n    }\n    if (var.x-datadome-headers ~ \"(?i)(^| )+cache-control( |$)+\") {\n      set resp.http.cache-control = urldecode(req.http.x-datadome-headers-pairs:cache-control);\n    }\n    if (var.x-datadome-headers ~ \"(?i)(^| )+pragma( |$)+\") {\n      set resp.http.pragma = urldecode(req.http.x-datadome-headers-pairs:pragma);\n    }\n    if (var.x-datadome-headers ~ \"(?i)(^| )+access-control-allow-credentials( |$)+\") {\n      set resp.http.access-control-allow-credentials = urldecode(req.http.x-datadome-headers-pairs:access-control-allow-credentials);\n    }\n    if (var.x-datadome-headers ~ \"(?i)(^| )+access-control-expose-headers( |$)+\") {\n      set resp.http.access-control-expose-headers = urldecode(req.http.x-datadome-headers-pairs:access-control-expose-headers);\n    }\n    if (var.x-datadome-headers ~ \"(?i)(^| )+access-control-allow-origin( |$)+\") {\n      set resp.http.access-control-allow-origin = urldecode(req.http.x-datadome-headers-pairs:access-control-allow-origin);\n    }\n    if (var.x-datadome-headers ~ \"(?i)(^| )+x-datadome-cid( |$)+\") {\n      set resp.http.x-datadome-cid = urldecode(req.http.x-datadome-headers-pairs:x-datadome-cid);\n    }\n    if (var.x-datadome-headers ~ \"(?i)(^| )+x-dd-b( |$)+\") {\n      set resp.http.x-dd-b = urldecode(req.http.x-datadome-headers-pairs:x-dd-b);\n    }\n    if (var.x-datadome-headers ~ \"(?i)(^| )+x-dd-type( |$)+\") {\n      set resp.http.x-dd-type = urldecode(req.http.x-datadome-headers-pairs:x-dd-type);\n    }\n    # don't forget about ApiServer's cookies\n    if (var.x-datadome-headers ~ \"(?i)(^| )+set-cookie( |$)+\") {\n      add resp.http.set-cookie = urldecode(req.http.x-datadome-headers-pairs:set-cookie);\n    }\n  }",
      "type": "deliver"
    },
    {
      "template": "  # Change the shielding condition to account for the extra restart for bot detection\n  set var.fastly_req_do_shield = (req.restarts <= 1);\n  # Configure the regular expression below to match URLs that\n  # should be checked by DataDome\n  if (fastly.ff.visits_this_service == 0 && req.restarts == 0 && req.url.ext !~ \"^(?i)(7z|avi|bmp|bz2|css|csv|doc|docx|eot|flac|flv|gif|gz|ico|jpeg|jpg|js|less|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txt|txz|wav|webm|webp|woff|woff2|xls|xlsx|xml|xz|zip)$\") {\n    set req.http.destination = \"datadome\";\n  } else {\n    set req.http.destination = \"origin\";\n  }\n\n  if (req.http.destination == \"datadome\") {\n    set req.backend = datadome;\n    # Configure the string below to include your DataDome API key\n    set req.http.x-datadome-headers-pairs:x-original-method = urlencode(req.method);\n    set req.http.x-datadome-headers-pairs:x-content-length = urlencode(req.http.content-length);\n    set req.method = \"GET\";\n    return (pass);\n  } else {\n    if (req.http.x-datadome-headers-pairs:x-original-method) {\n      set req.method = urldecode(req.http.x-datadome-headers-pairs:x-original-method);\n      # After a restart, clustering is disabled. This re-enables it.\n      set req.http.fastly-force-shield = \"1\";\n    }\n  }\n\n  # we're using the first restart for datadome, update a part of fastly code\n  # we can't replace whole macros because we haven't got any idea about backends\n  if (req.restarts == 1) {\n    if (!req.http.x-timer) {\n      set req.http.x-timer = \"S\" time.start.sec \".\" time.start.usec_frac;\n    }\n    set req.http.x-timer = req.http.x-timer \",VS0\";\n  }",
      "type": "recv"
    },
    {
      "template": "  call set_origin_header;",
      "type": "miss"
    },
    {
      "template": "  call set_origin_header;",
      "type": "pass"
    }
  ],
  "version": 1
}
